
@{
    Layout = "~/_SiteLayout.cshtml";
    Page.Title = "Register";

    // Initialize general page variables
    var email = "";
    var occupation = "";
    var licenceNumber = "";
    var stateProvider = "";
    var city = "";
    var password = "";
    var confirmPassword = "";
    var firstname = "";
    var company = "";
    var lastname = "";
    var experience = "Need Some Information";
    var about = "Need Some Information!!";

    // Setup validation
    Validation.RequireField("email", "You must specify an email address.");
    Validation.RequireField("password", "Password cannot be blank.");
    Validation.RequireField("firstname", "The First Name field is required.");
    Validation.RequireField("lastname", "The Last Name field is required.");
    Validation.Add("confirmPassword",
        Validator.EqualsTo("password", "Password and confirmation password do not match."));
    Validation.Add("password",
        Validator.StringLength(
            maxLength: Int32.MaxValue,
            minLength: 6,
            errorMessage: "Password must be at least 6 characters"));

    // If this is a POST request, validate and process data
    if (IsPost) {
        AntiForgery.Validate();
        email = Request.Form["email"];
        password = Request.Form["password"];
        confirmPassword = Request.Form["confirmPassword"];
        stateProvider = Request.Form["state"];
        city = Request.Form["city"];
        company = Request.Form["company"];
        occupation = Request.Form["occupation"];
        licenceNumber = Request.Form["licenceNumber"];
        firstname = Request.Form["firstname"];
        var firstUp = char.ToUpper(firstname[0]) + firstname.Substring(1);
        lastname = Request.Form["lastname"];
        var lastUp = char.ToUpper(lastname[0]) + lastname.Substring(1);
        

        // Validate the user's captcha answer
        // if (!ReCaptcha.Validate("PRIVATE_KEY")) {
        //     ModelState.AddError("recaptcha", "Captcha response was not correct");
        // }

        // If all information is valid, create a new account
        if (Validation.IsValid()) {
            // Insert a new user into the database
            var db = Database.Open("StarterSite");

            // Check if user already exists
            var user = db.QuerySingle("SELECT Email FROM UserProfile WHERE LOWER(Email) = LOWER(@0)", email);
            if (user == null) {
                // Insert email into the profile table

                db.Execute("INSERT INTO UserProfile (Email, Occupation, licenseNumber, stateProvider, firstName, lastName, visibility, About, Experience, City, Company, [isFlag], [Disabled]) VALUES (@0, @1, @2, @3, @4, @5, @6,@7,@8,@9,@10,@11,@12)", email, occupation, licenceNumber, stateProvider, firstUp, lastUp, 2, about, experience,city,company,false,false);

                // Create and associate a new entry in the membership database.
                // If successful, continue processing the request
                try {
                    bool requireEmailConfirmation = !WebMail.SmtpServer.IsEmpty();
                    var token = WebSecurity.CreateAccount(email, password, requireEmailConfirmation);
                    var roles = (SimpleRoleProvider)Roles.Provider;
                    roles.AddUsersToRoles(new[] { ""+email }, new[] { occupation });

                        WebSecurity.Login(email, password);

                        Response.Redirect("~/");
                    //}
                } catch (System.Web.Security.MembershipCreateUserException e) {
                    ModelState.AddFormError(e.Message);
                }
            } else {
                // User already exists
                ModelState.AddFormError("Email address is already in use.");
            }
        }
    }
}

<hgroup class="title">
    <h1>@Page.Title.</h1>
    <h2>Create a new account.</h2>
</hgroup>

<form method="post">
    @AntiForgery.GetHtml()
    @* If at least one validation error exists, notify the user *@
    @Html.ValidationSummary("Account creation was unsuccessful. Please correct the errors and try again.", excludeFieldErrors: true, htmlAttributes: null)

    <fieldset>
        <legend>Registration Form</legend>
        <ol>
               <li>
                <label>First Name</label>
                <input type="text" id="firstname" name="firstname" value="@firstname"  @Validation.For("firstname")) />
                   @Html.ValidationMessage("firstname")
            </li>
            <li>
                <label>Last Name</label>
                <input type="text" id="lastname" name="lastname" value="@lastname"  @Validation.For("lastname")) />
                @Html.ValidationMessage("lastname")
            </li>
            <li class="email">
                <label for="email" @if(!ModelState.IsValidField("email")){<text>class="error-label"</text>}>Email address</label>
                <input type="text" id="email" name="email" value="@email" @Validation.For("email") />
                @* Write any email validation errors to the page *@
                @Html.ValidationMessage("email")
            </li>
            <li>
                <label>Occupation</label>
               <select id="occupation" onchange="unhideML()" name="occupation" size="1" >
                    <option value=" " selected="selected"></option>
                    <option value="Physical Therapist">Physical Therapist</option>
                    <option value="Occupational Therapist">Occupational Therapist</option>
                   <option value="Personal Trainer">Personal Trainer</option>
                    <option value="Student: PT">Student: Physical Therapist</option>
                   <option value="Student: OT">Student: Occupational Therapist</option>
                   </select>
            </li>
            <li>
                <label id="idLicense" style="visibility: hidden">Medical Licence Number</label>
                <input type="text" style="visibility: hidden" id="licenseNumber" name="licenseNumber" value="@licenceNumber") />
            </li>
            <li>
                <label id="idcomp">Company/Business</label>
                <input type="text" id="company" name="company" value="@company") />
            </li>
            <li>
                <label id="idcity">City/Providence</label>
                <input type="text" id="city" name="city" value="@city") />
            </li>
            <li>
                <label>State Provider</label>
                <select id="state"  name="state" size="1" >
                    <option value=" " selected="selected"></option>
                    <option value="AL">AL-Alabama</option>
                    <option value="AK">AK-Alaska</option>
                    <option value="AZ">AZ-Arizona</option>
                    <option value="AR">AR-Arkansas</option>
                    <option value="CA">CA-California</option>
                    <option value="CO">CO-Colorado</option>
                    <option value="CT">CT-Connecticut</option>
                    <option value="DE">DE-Delaware</option>
                    <option value="DC">DC-District of Columbia</option>
                    <option value="FL">FL-Florida</option>
                    <option value="GA">GA-Georgia</option>
                    <option value="HI">HI-Hawaii</option>
                    <option value="ID">ID-Idaho</option>
                    <option value="IL">IL-Illinois</option>
                    <option value="IN">IN-Indiana</option>
                    <option value="IA">IA-Iowa</option>
                    <option value="KS">KS-Kansas</option>
                    <option value="KY">KY-Kentucky</option>
                    <option value="LA">LA-Louisiana</option>
                    <option value="ME">ME-Maine</option>
                    <option value="MD">MD-Maryland</option>
                    <option value="MA">MA-Massachusetts</option>
                    <option value="MI">MI-Michigan</option>
                    <option value="MN">MN-Minnesota</option>
                    <option value="MS">MS-Mississippi</option>
                    <option value="MO">MO-Missouri</option>
                    <option value="MT">MT-Montana</option>
                    <option value="NE">NE-Nebraska</option>
                    <option value="NV">NV-Nevada</option>
                    <option value="NH">NH-New Hampshire</option>
                    <option value="NJ">NJ-New Jersey</option>
                    <option value="NM">NM-New Mexico</option>
                    <option value="NY">NY-New York</option>
                    <option value="NC">NC-North Carolina</option>
                    <option value="ND">ND-North Dakota</option>
                    <option value="OH">OH-Ohio</option>
                    <option value="OK">OK-Oklahoma</option>
                    <option value="OR">OR-Oregon</option>
                    <option value="PA">PA-Pennsylvania</option>
                    <option value="RI">RI-Rhode Island</option>
                    <option value="SC">SC-South Carolina</option>
                    <option value="SD">SD-South Dakota</option>
                    <option value="TN">TN-Tennessee</option>
                    <option value="TX">TX-Texas</option>
                    <option value="UT">UT-Utah</option>
                    <option value="VT">VT-Vermont</option>
                    <option value="VA">VA-Virginia</option>
                    <option value="WA">WA-Washington</option>
                    <option value="WV">WV-West Virginia</option>
                    <option value="WI">WI-Wisconsin</option>
                    <option value="WY">WY-Wyoming</option>
                </select>
            </li>
            <li class="password">
                <label for="password" @if(!ModelState.IsValidField("password")) {<text>class="error-label"</text>}>Password</label>
                <input type="password" id="password" name="password" @Validation.For("password") />
                @* Write any password validation errors to the page *@
                @Html.ValidationMessage("password")
            </li>
            <li class="confirm-password">
                <label for="confirmPassword" @if(!ModelState.IsValidField("confirmPassword")) {<text>class="error-label"</text>}>Confirm password</label>
                <input type="password" id="confirmPassword" name="confirmPassword" @Validation.For("confirmPassword") />
                @* Write any password validation errors to the page *@
                @Html.ValidationMessage("confirmPassword")
        </ol>
        <input type="submit" value="Register" />
    </fieldset>
</form>